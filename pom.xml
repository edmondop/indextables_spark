<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.indextables</groupId>
    <artifactId>indextables_spark</artifactId>
    <version>0.3_spark_3.3.3_x86_64-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>Tantivy4Spark</name>
    <description>Fast search file format for Apache Spark using Tantivy search engine</description>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <scala.version>2.12.20</scala.version>
        <scala.compat.version>2.12</scala.compat.version>
        <spark.version>3.5.3</spark.version>
        <hadoop.version>3.3.4</hadoop.version>
        <aws.sdk.version>2.20.26</aws.sdk.version>
        <scalatest.version>3.2.15</scalatest.version>
        <mockito.version>4.11.0</mockito.version>
        <antlr.version>4.9.3</antlr.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Override problematic audience-annotations version -->
            <dependency>
                <groupId>org.apache.yetus</groupId>
                <artifactId>audience-annotations</artifactId>
                <version>0.13.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Scala -->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>

        <!-- Spark -->
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.yetus</groupId>
                    <artifactId>audience-annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.yetus</groupId>
                    <artifactId>audience-annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-catalyst_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.yetus</groupId>
                    <artifactId>audience-annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Hadoop -->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>${hadoop.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.yetus</groupId>
                    <artifactId>audience-annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Clean audience-annotations dependency -->
        <dependency>
            <groupId>org.apache.yetus</groupId>
            <artifactId>audience-annotations</artifactId>
            <version>0.13.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- AWS SDK for S3 optimization -->
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>${aws.sdk.version}</version>
        </dependency>

        <!-- S3A filesystem for S3 operations -->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-aws</artifactId>
            <version>${hadoop.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- JSON processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-scala_${scala.compat.version}</artifactId>
            <version>2.15.2</version>
        </dependency>


        <!-- Tantivy4Java - Java bindings for Tantivy search engine -->
        <dependency>
            <groupId>com.tantivy4java</groupId>
            <artifactId>tantivy4java</artifactId>
            <version>0.24.1_x86_64</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.36</version>
        </dependency>

        <!-- ANTLR for SQL parsing -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4-runtime</artifactId>
            <version>${antlr.version}</version>
        </dependency>

<!-- Test Dependencies -->
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
            <version>${scalatest.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.scalatestplus</groupId>
            <artifactId>mockito-3-4_${scala.compat.version}</artifactId>
            <version>3.2.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <classifier>tests</classifier>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <classifier>tests</classifier>
            <scope>test</scope>
        </dependency>
        <!-- Findify S3Mock for testing S3 functionality - stable, no logging conflicts -->
        <dependency>
            <groupId>io.findify</groupId>
            <artifactId>s3mock_2.12</artifactId>
            <version>0.2.6</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>

        <plugins>
            <!-- Scala compiler -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>4.8.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                    <args>
                        <arg>-deprecation</arg>
                        <arg>-feature</arg>
                        <arg>-unchecked</arg>
                        <arg>-Xlint</arg>
                        <arg>-Ywarn-unused:imports</arg>
                    </args>
                </configuration>
            </plugin>

            <!-- ANTLR Plugin -->
            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-maven-plugin</artifactId>
                <version>${antlr.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>antlr4</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <visitor>true</visitor>
                    <listener>true</listener>
                </configuration>
            </plugin>

            <!-- Maven Surefire Plugin for forked test execution -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M9</version>
                <configuration>
                    <!-- Fork each test class in a separate JVM for better isolation -->
                    <forkCount>1</forkCount>
                    <reuseForks>false</reuseForks>
                    <parallel>none</parallel>
                    <!-- JVM settings for forked processes -->
                    <argLine>-Xmx2g -XX:MaxMetaspaceSize=512m</argLine>
                    <!-- Environment variables for forked processes -->
                    <environmentVariables>
                        <SPARK_LOCAL_DIRS>/tmp</SPARK_LOCAL_DIRS>
                    </environmentVariables>
                    <!-- Include ScalaTest tests -->
                    <includes>
                        <include>**/*Test.class</include>
                        <include>**/*Suite.class</include>
                    </includes>
                </configuration>
            </plugin>

            <!-- ScalaTest -->
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>2.2.0</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>TestSuiteReport.txt</filereports>
                    <!-- Run tests with increased memory -->
                    <argLine>-Xmx2g -XX:MaxMetaspaceSize=512m</argLine>
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Code coverage -->
            <plugin>
                <groupId>org.scoverage</groupId>
                <artifactId>scoverage-maven-plugin</artifactId>
                <version>1.4.11</version>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                    <minimumCoverage>90</minimumCoverage>
                    <failOnMinimumCoverage>true</failOnMinimumCoverage>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Spotless code formatter with Scalafmt -->
            <plugin>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <version>2.43.0</version>
                <configuration>
                    <scala>
                        <includes>
                            <include>src/main/scala/**/*.scala</include>
                            <include>src/test/scala/**/*.scala</include>
                        </includes>
                        <scalafmt>
                            <version>3.7.17</version>
                            <file>${project.basedir}/.scalafmt.conf</file>
                        </scalafmt>
                    </scala>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>

            <!-- Exec plugin to run Scalafix via coursier -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>scalafix</id>
                        <phase>none</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>sh</executable>
                            <arguments>
                                <argument>-c</argument>
                                <argument>
                                    cs launch scalafix:0.11.1 --main scalafix.cli.Cli -- \
                                    --config=${project.basedir}/.scalafix.conf \
                                    --rules=OrganizeImports \
                                    src/main/scala src/test/scala
                                </argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>scalafix-check</id>
                        <phase>none</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>sh</executable>
                            <arguments>
                                <argument>-c</argument>
                                <argument>
                                    cs launch scalafix:0.11.1 --main scalafix.cli.Cli -- \
                                    --check \
                                    --config=${project.basedir}/.scalafix.conf \
                                    --rules=OrganizeImports \
                                    src/main/scala src/test/scala
                                </argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Assembly plugin for fat JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.4.2</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <!-- Maven Shade plugin for creating shaded JAR with repackaged dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>com.tantivy4java:tantivy4java</include>
                                    <include>software.amazon.awssdk:*</include>
                                    <!-- <include>com.fasterxml.jackson.core:*</include>
                                    <include>com.fasterxml.jackson.module:*</include> -->
                                    <include>com.thoughtworks.paranamer:paranamer</include>
                                    <include>org.reactivestreams:reactive-streams</include>
                                    <include>software.amazon.eventstream:eventstream</include>
                                </includes>
                            </artifactSet>
                            <!-- <relocations>
                                <relocation>
                                    <pattern>com.tantivy4java</pattern>
                                    <shadedPattern>tantivy4spark.com.tantivy4java</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>software.amazon.awssdk</pattern>
                                    <shadedPattern>tantivy4spark.software.amazon.awssdk</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>com.fasterxml.jackson</pattern>
                                    <shadedPattern>tantivy4spark.com.fasterxml.jackson</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>com.thoughtworks.paranamer</pattern>
                                    <shadedPattern>tantivy4spark.com.thoughtworks.paranamer</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.reactivestreams</pattern>
                                    <shadedPattern>tantivy4spark.org.reactivestreams</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>software.amazon.eventstream</pattern>
                                    <shadedPattern>tantivy4spark.software.amazon.eventstream</shadedPattern>
                                </relocation>
                            </relocations> -->
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>shaded</shadedClassifierName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
